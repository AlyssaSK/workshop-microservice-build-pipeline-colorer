// Code generated by protoc-gen-go. DO NOT EDIT.
// source: colorer.proto

package colorer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetColorRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetColorRequest) Reset()         { *m = GetColorRequest{} }
func (m *GetColorRequest) String() string { return proto.CompactTextString(m) }
func (*GetColorRequest) ProtoMessage()    {}
func (*GetColorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_colorer_5b6fd54a4ff7223b, []int{0}
}
func (m *GetColorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetColorRequest.Unmarshal(m, b)
}
func (m *GetColorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetColorRequest.Marshal(b, m, deterministic)
}
func (dst *GetColorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetColorRequest.Merge(dst, src)
}
func (m *GetColorRequest) XXX_Size() int {
	return xxx_messageInfo_GetColorRequest.Size(m)
}
func (m *GetColorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetColorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetColorRequest proto.InternalMessageInfo

type GetColorResponse struct {
	Cold                 uint32   `protobuf:"varint,1,opt,name=cold" json:"cold,omitempty"`
	Hot                  uint32   `protobuf:"varint,2,opt,name=hot" json:"hot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetColorResponse) Reset()         { *m = GetColorResponse{} }
func (m *GetColorResponse) String() string { return proto.CompactTextString(m) }
func (*GetColorResponse) ProtoMessage()    {}
func (*GetColorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_colorer_5b6fd54a4ff7223b, []int{1}
}
func (m *GetColorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetColorResponse.Unmarshal(m, b)
}
func (m *GetColorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetColorResponse.Marshal(b, m, deterministic)
}
func (dst *GetColorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetColorResponse.Merge(dst, src)
}
func (m *GetColorResponse) XXX_Size() int {
	return xxx_messageInfo_GetColorResponse.Size(m)
}
func (m *GetColorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetColorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetColorResponse proto.InternalMessageInfo

func (m *GetColorResponse) GetCold() uint32 {
	if m != nil {
		return m.Cold
	}
	return 0
}

func (m *GetColorResponse) GetHot() uint32 {
	if m != nil {
		return m.Hot
	}
	return 0
}

func init() {
	proto.RegisterType((*GetColorRequest)(nil), "colorer.GetColorRequest")
	proto.RegisterType((*GetColorResponse)(nil), "colorer.GetColorResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ColorerClient is the client API for Colorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ColorerClient interface {
	GetColor(ctx context.Context, in *GetColorRequest, opts ...grpc.CallOption) (*GetColorResponse, error)
}

type colorerClient struct {
	cc *grpc.ClientConn
}

func NewColorerClient(cc *grpc.ClientConn) ColorerClient {
	return &colorerClient{cc}
}

func (c *colorerClient) GetColor(ctx context.Context, in *GetColorRequest, opts ...grpc.CallOption) (*GetColorResponse, error) {
	out := new(GetColorResponse)
	err := c.cc.Invoke(ctx, "/colorer.Colorer/GetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Colorer service

type ColorerServer interface {
	GetColor(context.Context, *GetColorRequest) (*GetColorResponse, error)
}

func RegisterColorerServer(s *grpc.Server, srv ColorerServer) {
	s.RegisterService(&_Colorer_serviceDesc, srv)
}

func _Colorer_GetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorerServer).GetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colorer.Colorer/GetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorerServer).GetColor(ctx, req.(*GetColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Colorer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "colorer.Colorer",
	HandlerType: (*ColorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetColor",
			Handler:    _Colorer_GetColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "colorer.proto",
}

func init() { proto.RegisterFile("colorer.proto", fileDescriptor_colorer_5b6fd54a4ff7223b) }

var fileDescriptor_colorer_5b6fd54a4ff7223b = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xc9,
	0x2f, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x04, 0xb9,
	0xf8, 0xdd, 0x53, 0x4b, 0x9c, 0x41, 0xbc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x0b,
	0x2e, 0x01, 0x84, 0x50, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x10, 0x17, 0x4b, 0x72, 0x7e,
	0x4e, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x98, 0x2d, 0x24, 0xc0, 0xc5, 0x9c, 0x91,
	0x5f, 0x22, 0xc1, 0x04, 0x16, 0x02, 0x31, 0x8d, 0x7c, 0xb8, 0xd8, 0x9d, 0x21, 0xe6, 0x0a, 0x39,
	0x72, 0x71, 0xc0, 0x0c, 0x11, 0x92, 0xd0, 0x83, 0x59, 0x8e, 0x66, 0x95, 0x94, 0x24, 0x16, 0x19,
	0x88, 0x8d, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0xa7, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0,
	0x43, 0x7a, 0xc4, 0xbb, 0x00, 0x00, 0x00,
}
